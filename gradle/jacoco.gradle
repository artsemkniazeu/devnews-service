def projectPackage = "pl/dev/news"

def jacocoExclude =  [
        "**/DevnewsServiceApplication.class",
        "${projectPackage}/controller/api/*.class",
        "${projectPackage}/model/rest/*.class",
        "${projectPackage}/openapitools/*.class",

        "${projectPackage}/devnewsservice/security/*.class",
        "${projectPackage}/devnewsservice/mapper/*.class",
        "${projectPackage}/devnewsservice/constants/*.class",
        "${projectPackage}/devnewsservice/entity/*.class",
        "${projectPackage}/devnewsservice/exception/*.class",
        "${projectPackage}/devnewsservice/service/impl/GoogleFileServiceImpl.class",
        "${projectPackage}/devnewsservice/service/impl/TwilioServiceImpl.class",
]

jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("${buildDir}/reports/jacoco/html")
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    }
}

jacocoTestReport {
    reports {
        xml.enabled = false
        html.destination = file("${buildDir}/reports/jacoco/html")
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        })
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        })
    }
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

jacocoTestReport.mustRunAfter test
jacocoTestCoverageVerification.dependsOn jacocoTestReport
build.dependsOn jacocoTestCoverageVerification

