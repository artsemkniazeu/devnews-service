<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
    <module name="SuppressionFilter">
        <property name="file" value="${config_loc}/suppressions.xml" />
    </module>
    <property name="charset" value="UTF-8" />
    <property name="severity" value="error" />
    <property name="fileExtensions" value="java, properties, xml" />

    <!-- Miscellaneous other checks. -->
    <!-- See https://checkstyle.org/config_misc.html -->
    <module name="NewlineAtEndOfFile" />

    <!-- Checks for whitespace -->
    <!-- See https://checkstyle.org/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <!-- Excludes all 'module-info.java' files              -->
    <!-- See https://checkstyle.org/config_filters.html -->
    <module name="SuppressWarningsFilter" />

    <module name="TreeWalker">

        <!-- Checks for Javadoc comments. -->
        <!-- See hhttps://checkstyle.org/config_javadoc.html -->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated" />
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
        </module>
        <module name="JavadocParagraph" />
        <module name="JavadocTagContinuationIndentation" />
        <module name="NonEmptyAtclauseDescription" />
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false" />
        </module>
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )" />
        </module>

        <!-- Checks for Naming Conventions. -->
        <!-- See https://checkstyle.org/config_naming.html -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
            <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="TypeName">
            <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$" />
            <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Lambda parameter name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false" />
            <property name="allowedAbbreviationLength" value="1" />
        </module>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />
            <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''." />
        </module>

        <!-- Checks for common coding problems -->
        <!-- See https://checkstyle.org/config_coding.html -->
        <module name="CovariantEquals" />
        <module name="DeclarationOrder" />
        <module name="DefaultComesLast" />
        <module name="EmptyStatement" />
        <module name="EqualsHashCode" />
        <module name="IllegalInstantiation" />
        <module name="ModifiedControlVariable" />
        <module name="ParameterAssignment" />
        <module name="ReturnCount" />
        <module name="SimplifyBooleanExpression" />
        <module name="SimplifyBooleanReturn" />
        <module name="UnnecessaryParentheses" />
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />
            <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
            <property name="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value." />
        </module>
        <module name="OneStatementPerLine" />
        <module name="MultipleVariableDeclarations" />
        <module name="MissingSwitchDefault" />
        <module name="FallThrough" />
        <module name="NoFinalizer" />
        <module name="OverloadMethodsDeclarationOrder" />
        <module name="VariableDeclarationUsageDistance" />

        <!-- Miscellaneous other checks. -->
        <!-- See https://checkstyle.org/config_misc.html -->
        <module name="OuterTypeFilename" />
        <module name="FinalParameters" />
        <module name="UncommentedMain">
            <property name="excludedClasses" value="Application$" />
        </module>
        <module name="FinalParameters" />
        <module name="OuterTypeFilename" />
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true" />
            <property name="allowByTailComment" value="true" />
            <property name="allowNonPrintableEscapes" value="true" />
        </module>
        <module name="ArrayTypeStyle" />
        <module name="UpperEll" />
        <module name="Indentation">
            <property name="basicOffset" value="4" />
            <property name="braceAdjustment" value="0" />
            <property name="caseIndent" value="4" />
            <property name="throwsIndent" value="4" />
            <property name="lineWrappingIndentation" value="8" />
            <property name="arrayInitIndent" value="4" />
        </module>
        <module name="CommentsIndentation" />

        <!-- Checks for class design -->
        <!-- See https://checkstyle.org/config_design.html -->
        <module name="MutableException" />
        <module name="OneTopLevelClass" />

        <!-- Checks for whitespace -->
        <!-- See https://checkstyle.org/config_whitespace.html -->
        <module name="ParenPad" />
        <module name="WhitespaceAfter" />
        <module name="NoLineWrap" />
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="true" />
            <property name="allowEmptyTypes" value="true" />
            <property name="allowEmptyLoops" value="true" />
            <message key="ws.notFollowed" value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)" />
            <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
        </module>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot" />
            <property name="tokens" value="DOT" />
            <property name="option" value="nl" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma" />
            <property name="tokens" value="COMMA" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
            <property name="id" value="SeparatorWrapEllipsis" />
            <property name="tokens" value="ELLIPSIS" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
            <property name="id" value="SeparatorWrapArrayDeclarator" />
            <property name="tokens" value="ARRAY_DECLARATOR" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef" />
            <property name="tokens" value="METHOD_REF" />
            <property name="option" value="nl" />
        </module>
        <module name="GenericWhitespace">
            <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace." />
            <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace." />
            <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace." />
            <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
        </module>
        <module name="MethodParamPad" />
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF" />
            <property name="allowLineBreaks" value="true" />
        </module>
        <module name="OperatorWrap">
            <property name="option" value="NL" />
            <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,                     LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF " />
        </module>

        <!-- Checks for imports                              -->
        <!-- See https://checkstyle.org/config_imports.html -->
        <module name="RedundantImport" />
        <module name="UnusedImports" />
        <module name="AvoidStarImport" />
        <module name="ImportOrder">
            <property name="groups" value="*,javax,java" />
            <property name="ordered" value="true" />
            <property name="separated" value="true" />
            <property name="option" value="bottom" />
            <property name="sortStaticImportsAlphabetically" value="true" />
        </module>

        <!-- Modifier Checks                                    -->
        <!-- See https://checkstyle.org/config_modifiers.html -->
        <module name="RedundantModifier" />
        <module name="ModifierOrder" />

        <!-- Checks for blocks. You know, those {}'s -->
        <!-- See https://checkstyle.org/config_blocks.html -->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="ignored" />
        </module>
        <module name="EmptyBlock">
            <property name="option" value="TEXT" />
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH" />
        </module>
        <module name="NeedBraces" />
        <module name="LeftCurly" />
        <module name="RightCurly">
            <property name="id" value="RightCurlySame" />
            <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,                     LITERAL_DO" />
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone" />
            <property name="option" value="alone" />
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,                     INSTANCE_INIT" />
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected" />
        </module>

        <!-- Checks for long anonymous inner classes. -->
        <!-- https://checkstyle.org/config_sizes.html -->
        <module name="LineLength">
            <property name="max" value="120" />
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://" />
        </module>
        <module name="MethodLength">
            <property name="max" value="60"/>
        </module>

        <!-- Excludes all 'module-info.java' files              -->
        <!-- See https://checkstyle.org/config_filters.html -->
        <module name="SuppressionXpathSingleFilter">
            <property name="checks" value="ImportOrder" />
            <property name="message" value="^'java\..*'.*" />
        </module>

        <!-- Check location of annotation on language elements. -->
        <!-- https://checkstyle.org/config_annotation.html -->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases" />
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF" />
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables" />
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="allowSamelineMultipleAnnotations" value="true" />
        </module>
        <module name="SuppressWarningsHolder" />
    </module>
</module>