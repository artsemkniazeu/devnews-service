openapi: 3.0.0
info:
  title: Dev News
  version: "0.1"
  description: Dev News - API

tags:
  - name: Auth
  - name: User
  - name: UserResources
  - name: Category
  - name: Comment
  - name: Group
  - name: Post
  - name: Tag
  - name: Upload

servers:
  - url: /api/v1

paths:

  # ========================================
  # ===== Auth API
  # ========================================
  /auth/sign-in:
    post:
      tags:
        - Auth
      operationId: signIn
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignInRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"

  /auth/sign-up:
    post:
      tags:
        - Auth
      operationId: signUp
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignUpRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /auth/refresh-token:
    post:
      tags:
        - Auth
      operationId: refreshToken
      security: []
      requestBody:
        $ref: "#/components/requestBodies/RefreshTokenRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"


  # ========================================
  # ===== User API
  # ========================================
  /users:
    get:
      tags:
        - User
      operationId: getUsers
      security:
        - userAuth: []
      parameters:
        - name: parameters
          in: query
          schema:
            $ref: "#/components/schemas/UserQueryParameters"
          style: form
          explode: true
        - $ref: "#/components/parameters/PageQueryParameter"
        - $ref: "#/components/parameters/SizeQueryParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  "/users/{userId}":
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - User
      operationId: getUser
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - User
      operationId: updateUser
      security:
        - userAuth: []
      requestBody:
        $ref: "#/components/requestBodies/UserRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags:
        - User
      operationId: deleteUser
      security:
        - userAuth: []
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"

  "/users/{userId}/follow":
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - User
      operationId: followUser
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  "/users/{userId}/unfollow":
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    delete:
      tags:
        - User
      operationId: unfollowUser
      security:
        - userAuth: []
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"

  /users/{userId}/avatar:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - User
      operationId: uploadImage
      security:
        - userAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"

  # ========================================
  # ===== User Resources API
  # ========================================

  "/users/{userId}/resources/bookmarks":
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - UserResources
      operationId: getUserBookmarks
      security:
        - userAuth: []
      parameters:
        - name: parameters
          in: query
          schema:
            $ref: "#/components/schemas/PostQueryParameters"
          style: form
          explode: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  "/users/{userId}/resources/followers":
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - UserResources
      operationId: getUserFollowers
      security:
        - userAuth: []
      parameters:
        - $ref: "#/components/parameters/PageQueryParameter"
        - $ref: "#/components/parameters/SizeQueryParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  "/users/{userId}/resources/following":
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - UserResources
      operationId: getUserFollowing
      security:
        - userAuth: []
      parameters:
        - $ref: "#/components/parameters/PageQueryParameter"
        - $ref: "#/components/parameters/SizeQueryParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"


  # ========================================
  # ===== Category API
  # ========================================
  /categories:
    get:
      tags:
        - Category
      operationId: getCategories
      security:
        - userAuth: []
      parameters:
        - name: parameters
          in: query
          schema:
            $ref: "#/components/schemas/CategoryQueryParameters"
          style: form
          explode: true
        - $ref: "#/components/parameters/PageQueryParameter"
        - $ref: "#/components/parameters/SizeQueryParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Category
      operationId: createCategory
      security: []
      requestBody:
        $ref: "#/components/requestBodies/CategoryRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  "/categories/{categoryId}":
    parameters:
      - name: categoryId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Category
      operationId: getCategory
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - Category
      operationId: updateCategory
      security:
        - userAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CategoryRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags:
        - Category
      operationId: deleteCategory
      security:
        - userAuth: []
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"

  # ========================================
  # ===== Tag API
  # ========================================
  /tags:
    get:
      tags:
        - Tag
      operationId: getTags
      security:
        - userAuth: []
      parameters:
        - name: parameters
          in: query
          schema:
            $ref: "#/components/schemas/TagQueryParameters"
          style: form
          explode: true
        - $ref: "#/components/parameters/PageQueryParameter"
        - $ref: "#/components/parameters/SizeQueryParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TagModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Tag
      operationId: createTag
      security: []
      requestBody:
        $ref: "#/components/requestBodies/TagRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  "/tags/{tagId}":
    parameters:
      - name: tagId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Tag
      operationId: getTag
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - Tag
      operationId: updateTag
      security:
        - userAuth: []
      requestBody:
        $ref: "#/components/requestBodies/TagRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TagModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags:
        - Tag
      operationId: deleteTag
      security:
        - userAuth: []
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"

  # ========================================
  # ===== Comment API
  # ========================================
  /comments:
    get:
      tags:
        - Comment
      operationId: getComments
      security:
        - userAuth: []
      parameters:
        - name: parameters
          in: query
          schema:
            $ref: "#/components/schemas/CommentQueryParameters"
          style: form
          explode: true
        - $ref: "#/components/parameters/PageQueryParameter"
        - $ref: "#/components/parameters/SizeQueryParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommentModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - Comment
      operationId: createComment
      security: []
      requestBody:
        $ref: "#/components/requestBodies/CommentRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  "/comments/{commentId}":
    parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Comment
      operationId: getComment
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - Comment
      operationId: updateComment
      security:
        - userAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CommentRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags:
        - Comment
      operationId: deleteComment
      security:
        - userAuth: []
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"

  # ========================================
  # ===== Post API
  # ========================================
  /posts:
    get:
      tags:
        - Post
      operationId: getPosts
      security:
        - userAuth: []
      parameters:
        - name: parameters
          in: query
          schema:
            $ref: "#/components/schemas/PostQueryParameters"
          style: form
          explode: true
        - $ref: "#/components/parameters/PageQueryParameter"
        - $ref: "#/components/parameters/SizeQueryParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PostModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

    post:
      tags:
        - Post
      operationId: createPost
      security: []
      requestBody:
        $ref: "#/components/requestBodies/PostRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  "/posts/{postId}":
    parameters:
      - name: postId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Post
      operationId: getPost
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - Post
      operationId: updatePost
      security:
        - userAuth: []
      requestBody:
        $ref: "#/components/requestBodies/PostRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags:
        - Post
      operationId: deletePost
      security:
        - userAuth: []
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"

  # ========================================
  # ===== Group API
  # ========================================
  /groups:
    get:
      tags:
        - Group
      operationId: getGroups
      security:
        - userAuth: []
      parameters:
        - name: parameters
          in: query
          schema:
            $ref: "#/components/schemas/GroupQueryParameters"
          style: form
          explode: true
        - $ref: "#/components/parameters/PageQueryParameter"
        - $ref: "#/components/parameters/SizeQueryParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GroupModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

    post:
      tags:
        - Group
      operationId: createGroup
      security: []
      requestBody:
        $ref: "#/components/requestBodies/GroupRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  "/groups/{groupId}":
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Group
      operationId: getGroup
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - Group
      operationId: updateGroup
      security:
        - userAuth: []
      requestBody:
        $ref: "#/components/requestBodies/GroupRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags:
        - Group
      operationId: deleteGroup
      security:
        - userAuth: []
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"

  # /users/{userId}/image:
  #   parameters:
  #     - name: userId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #         format: uuid
  #   post:
  #     tags:
  #       - User
  #     operationId: uploadImage
  #     security:
  #       - userAuth: []
  #     requestBody:
  #       content:
  #         multipart/form-data:
  #           schema:
  #             type: object
  #             properties:
  #               file:
  #                 type: string
  #                 format: binary
  #     responses:
  #       "201":
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/UploadModel"
  #       "400":
  #         $ref: "#/components/responses/BadRequest"
  #       "401":
  #         $ref: "#/components/responses/Unauthorized"
  #       "422":
  #         $ref: "#/components/responses/UnprocessableEntity"
components:

  # ========================================
  # ===== Parameters
  # ========================================

  parameters:
    PageQueryParameter:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1

    SizeQueryParameter:
      name: size
      in: query
      schema:
        type: integer
        minimum: 10
        maximum: 30
        default: 10



  # ========================================
  # ===== RequestBodies
  # ========================================

  requestBodies:

    SignInRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignInRequest"
      required: true

    SignUpRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignUpRequest"
      required: true

    RefreshTokenRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RefreshTokenRequest"
      required: true

    UserRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserModel"
      required: true

    CategoryRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CategoryModel"
      required: true

    TagRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TagModel"
      required: true

    CommentRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TagModel"
      required: true

    PostRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PostModel"
      required: true

    GroupRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupModel"


  # ========================================
  # ===== Responses
  # ========================================

  responses:
    BadRequest:
      description: Bad Request

    Unauthorized:
      description: Unauthorized

    Forbidden:
      description: Forbidden

    NotFound:
      description: Not Found

    Conflict:
      description: Conflict

    UnprocessableEntity:
      description: Unprocessable Entity

    NotAcceptable:
      description: Not Acceptable

  # ========================================
  # ===== SecuritySchemes
  # ========================================

  securitySchemes:
    userAuth:
      type: apiKey
      in: header
      name: Authorization


  schemas:

    # ========================================
    # ===== Query Parameters Schemes
    # ========================================

    UserQueryParameters:
      type: object
      properties:
        name:
          type: string
        username:
          type: string
        email:
          type: string
          format: email

    CategoryQueryParameters:
      type: object
      properties:
        parentId:
          type: string
          format: uuid
        name:
          type: string
        value:
          type: string

    CommentQueryParameters:
      type: object
      properties:
        parentId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        text:
          type: string

    GroupQueryParameters:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        ownerId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid

    PostQueryParameters:
      type: object
      properties:
        title:
          type: string
        text:
          type: string
        tagId:
          type: string
          format: uuid
        categoryId:
          type: string
          format: uuid
        groupId:
          type: string
          format: uuid
        publisherId:
          type: string
          format: uuid

    TagQueryParameters:
      type: object
      properties:
        name:
          type: string
        followerId:
          type: string
          format: uuid
        postId:
          type: string
          format: uuid

    UploadQueryParameters:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        postId:
          type: string
          format: uuid

    # ========================================
    # ===== Model Schemes
    # ========================================

    TokenModel:
      type: object
      properties:
        token:
          type: string
        issuedAt:
          type: integer
          format: int64
        expiresIn:
          type: integer
          format: int64

    TokenResponse:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/TokenModel'
        refresh:
          $ref: '#/components/schemas/TokenModel'


    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    UserRole:
      type: string
      enum:
        - USER
        - ADMIN
        - MODERATOR
        - PUBLISHER

    SignInRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    SignUpRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string

    UserModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          format: string
        email:
          type: string
          format: email
        phone:
          type: string
        role:
          $ref: "#/components/schemas/UserRole"
        imageUrl:
          type: string
        bgUrl:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        birthday:
          type: string
        country:
          type: string
        city:
          type: string
        createdAt:
          type: string

    CategoryModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        value:
          type: string
        parent_id:
          type: string
          format: uuid
        children:
          type: array
          items:
            $ref: '#/components/schemas/CategoryModel'

    CommentModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        text:
          type: string
        likes:
          type: integer
          format: int64
        parent_id:
          type: string
          format: uuid
        children:
          type: array
          items:
            $ref: '#/components/schemas/CommentModel'
        user:
          $ref: '#/components/schemas/UserModel'

    GroupModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        value:
          type: string
        about:
          type: string
        nsfw:
          type: boolean
        owner_id:
          type: string
          format: uuid

    PostModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        text:
          type: string
        imageUrl:
          type: string
        updateDate:
          type: string
        publishDate:
          type: string
        publisher_id:
          type: string
          format: uuid
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagModel'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryModel'
        groupId:
          type: string
          format: uuid

    TagModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        value:
          type: string

    UploadModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        url:
          type: string
        user_id:
          type: string
          format: uuid

