openapi: 3.0.0
info:
  title: Dev News
  version: "0.1"
  description: Dev News - API

tags:
  - name: Auth
  - name: User

servers:
  - url: /api/v1

paths:

  # ========================================
  # ===== Auth API
  # ========================================
  /auth/sign-in:
    post:
      tags:
        - Auth
      operationId: signIn
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignInRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"

  /auth/sign-up:
    post:
      tags:
        - Auth
      operationId: signUp
      security: []
      requestBody:
        $ref: "#/components/requestBodies/SignUpRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /auth/refresh-token:
    post:
      tags:
        - Auth
      operationId: refreshToken
      security: []
      requestBody:
        $ref: "#/components/requestBodies/RefreshTokenRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"


  # ========================================
  # ===== User API
  # ========================================
  /users:
    get:
      tags:
        - User
      operationId: getUsers
      security:
        - userAuth: []
      parameters:
        - in: query
          name: name
          required: false
          schema:
            type: string
        - in: query
          name: username
          required: false
          schema:
            type: string
        - in: query
          name: email
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/PageQueryParameter"
        - $ref: "#/components/parameters/SizeQueryParameter"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  "/users/{userId}":
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - User
      operationId: getUser
      security:
        - userAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags:
        - User
      operationId: updateUser
      security:
        - userAuth: []
      requestBody:
        $ref: "#/components/requestBodies/UserModel"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags:
        - User
      operationId: deleteUser
      security:
        - userAuth: []
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"

  /users/{userId}/image:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - User
      operationId: uploadImage
      security:
        - userAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UrlModel"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"



components:

  # ========================================
  # ===== Parameters
  # ========================================

  parameters:
    PageQueryParameter:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    SizeQueryParameter:
      name: size
      in: query
      schema:
        type: integer
        minimum: 10
        maximum: 30
        default: 10

  # ========================================
  # ===== RequestBodies
  # ========================================

  requestBodies:

    SignInRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignInRequest"
      required: true

    SignUpRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignUpRequest"
      required: true

    RefreshTokenRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RefreshTokenRequest"
      required: true

    UserModel:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserModel"
      required: true

  # ========================================
  # ===== Responses
  # ========================================

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    NotAcceptable:
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"

  # ========================================
  # ===== SecuritySchemes
  # ========================================

  securitySchemes:
    userAuth:
      type: apiKey
      in: header
      name: Authorization

  schemas:
    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          format: int32
          minimum: 100
          maximum: 600
        detail:
          type: string

    TokenModel:
      type: object
      properties:
        token:
          type: string
        issuedAt:
          type: integer
          format: int64
        expiresIn:
          type: integer
          format: int64

    TokenResponse:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/TokenModel'
        refresh:
          $ref: '#/components/schemas/TokenModel'


    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    UrlModel:
      type: object
      properties:
        url:
          type: string

    UserRole:
      type: string
      enum:
        - USER
        - ADMIN
        - MODERATOR
        - PUBLISHER

    SignInRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    SignUpRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string

    UserModel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          format: string
        email:
          type: string
          format: email
        phone:
          type: string
        role:
          $ref: "#/components/schemas/UserRole"
        imageUrl:
          type: string
        bgUrl:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        birthday:
          type: string
        country:
          type: string
        city:
          type: string
        createdAt:
          type: string




